/*
 * Determines the orbital distance and velocity of a planet around a star.
 * Assumes circular orbits. 
 * Uses the OrbitCalculation class.
 */
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author Ahmed
 */
public class OrbitCalculationGUI extends javax.swing.JFrame {

    /**
     * Creates new form OrbitCalculationGUI
     */
    public OrbitCalculationGUI() {
        setLocation(500, 300);
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        myPanel = new javax.swing.JPanel();
        periodField = new javax.swing.JTextField();
        periodLabel = new javax.swing.JLabel();
        massField = new javax.swing.JTextField();
        massLabel = new javax.swing.JLabel();
        calculateButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        distanceLabel = new javax.swing.JLabel();
        mySeparator = new javax.swing.JSeparator();
        velocityLabel = new javax.swing.JLabel();
        distanceValue = new javax.swing.JLabel();
        velocityValue = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Planetary Orbit Calculation");
        setResizable(false);

        myPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Orbit Calculation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, null, new java.awt.Color(0, 51, 204)));

        periodLabel.setText("Orbital period of planet [Earth = 1.00]:");

        massLabel.setText("Mass of parent star [Sun = 1.00]:");

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear All");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        distanceLabel.setText("Orbital distance:");

        velocityLabel.setText("Orbital velocity:");

        javax.swing.GroupLayout myPanelLayout = new javax.swing.GroupLayout(myPanel);
        myPanel.setLayout(myPanelLayout);
        myPanelLayout.setHorizontalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myPanelLayout.createSequentialGroup()
                        .addComponent(velocityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(velocityValue))
                    .addComponent(massLabel)
                    .addGroup(myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(periodLabel)
                        .addComponent(periodField)
                        .addComponent(massField, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                    .addGroup(myPanelLayout.createSequentialGroup()
                        .addComponent(calculateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton))
                    .addGroup(myPanelLayout.createSequentialGroup()
                        .addComponent(distanceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distanceValue))
                    .addComponent(mySeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        myPanelLayout.setVerticalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myPanelLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(periodLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(periodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(massLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(massField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateButton)
                    .addComponent(clearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mySeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceLabel)
                    .addComponent(distanceValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(velocityLabel)
                    .addComponent(velocityValue)))
        );

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(myPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(myPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        double T;   // input  - mass of star (in terms of solar masses) 
        double M;   // input  - orbital period of planet (in terms of Earth-years)
        double R;   // output - orbital radius (distance) of planet (in astronomical units) 
        double V;   // output - orbital velocity of planet (in kilometers per second) 

        DecimalFormat decimalFormat = new DecimalFormat("0.00");   // Assigns two decimal places (for output)

        // 1. Get the orbital period of the planet from the user.
        try {
            T = Double.parseDouble(periodField.getText());
        } catch (Exception exception) {
            JOptionPane.showMessageDialog(null, "Invalid input. Try again.",
                    "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // 2. Get the mass of the host star from the user. 
        try {
            M = Double.parseDouble(massField.getText());
            if (M > 200) {
                JOptionPane.showMessageDialog(null, "Mass cannot exceed 200 Solar masses!", 
                        "Message", JOptionPane.ERROR_MESSAGE);
                massField.setText("");
                return;
            }
        } catch (Exception exception) {
            JOptionPane.showMessageDialog(null, "Invalid input. Try again.",
                    "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // 3. Calculate the orbital radius of the planet. 
        R = OrbitCalculation.getOrbitalDistance(M, T);
        // 4. Calculate the orbital velocity of the planet. 
        V = OrbitCalculation.getOrbitalVelocity(M, R);
        // 5. Display the value of the orbital distance of the planet.
        distanceValue.setText(String.valueOf(decimalFormat.format(R) + " AU"));
        // 6. Display the value of the orbital velocity of the planet.
        velocityValue.setText(String.valueOf(decimalFormat.format(V) + " km / sec"));
    }                                               

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // 1. Clear the period field.
        this.periodField.setText("");
        // 2. Clear the mass field.
        this.massField.setText("");
        // 3. Clear the distance field.
        this.distanceValue.setText("");
        // 4. Clear the velocity field.
        this.velocityValue.setText("");
    }                                           

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int selection; 
        while (true) {
            selection = JOptionPane.showConfirmDialog(null, "Are you sure you "
                    + "want to quit?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (selection == JOptionPane.NO_OPTION) {
                break;
            }
            else {
                System.exit(0);
            }
        }
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrbitCalculationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrbitCalculationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrbitCalculationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrbitCalculationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new OrbitCalculationGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel distanceLabel;
    private javax.swing.JLabel distanceValue;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField massField;
    private javax.swing.JLabel massLabel;
    private javax.swing.JPanel myPanel;
    private javax.swing.JSeparator mySeparator;
    private javax.swing.JTextField periodField;
    private javax.swing.JLabel periodLabel;
    private javax.swing.JLabel velocityLabel;
    private javax.swing.JLabel velocityValue;
    // End of variables declaration                   
}
